type Comment {
  created_at: DateTime
  id: ID!
  post: Post
    @materializer(
      query: "getPost"
      arguments: [{ name: "id", field: "post_id" }]
    )
  post_id: ID
  text: String
  username: String
}

type Post {
  body: String
  commentList: [Comment] @materializer(query: "getCommentUsingPost_id")
  created_at: DateTime
  id: ID!
  image: String
  subreadit: Subreadit
    @materializer(
      query: "getSubreadit"
      arguments: [{ name: "id", field: "subreadit_id" }]
    )
  subreadit_id: ID
  title: String
  username: String
  voteList: [Vote] @materializer(query: "getVoteUsingPost_id")
}

type Subreadit {
  created_at: DateTime
  id: ID!
  postList: [Post] @materializer(query: "getPostUsingSubreadit_id")
  topic: String
}

type Vote {
  created_at: DateTime
  id: ID!
  post: Post
    @materializer(
      query: "getPost"
      arguments: [{ name: "id", field: "post_id" }]
    )
  post_id: ID
  upvote: Boolean
}

"""
These are some examples of queries generated from the schema. Feel free to modify them or add your own.
"""
type Query {
  getCommentList: [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )
  getComment(id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )
  getPostList: [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      configuration: "postgresql_config"
    )
  getPost(id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      configuration: "postgresql_config"
    )
  getCommentUsingPost_id(id: ID!): [Comment]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."created_at", T."id", T."post_id", T."text", T."username"
        FROM "public"."comment" T
        WHERE T."post_id" = $1
      """
      configuration: "postgresql_config"
    )
  getVoteUsingPost_id(id: ID!): [Vote]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."created_at", T."id", T."post_id", T."upvote"
        FROM "public"."vote" T
        WHERE T."post_id" = $1
      """
      configuration: "postgresql_config"
    )
  getSubreaditList: [Subreadit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreadit"
      configuration: "postgresql_config"
    )
  getSubreaditListByTopic(topic: String!): [Subreadit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      select * from "subreadit" where topic = $1
      """
      configuration: "postgresql_config"
    )
  getSubreadit(id: ID!): Subreadit
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreadit"
      configuration: "postgresql_config"
    )
  getPostUsingSubreadit_id(id: ID!): [Post]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."body", T."created_at", T."id", T."image", T."subreadit_id", T."title", T."username"
        FROM "public"."post" T
        WHERE T."subreadit_id" = $1
      """
      configuration: "postgresql_config"
    )
  getVoteList: [Vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      configuration: "postgresql_config"
    )
  getVote(id: ID!): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      configuration: "postgresql_config"
    )
}

"""
These are some examples of mutations generated from the schema. Feel free to modify them or add your own.
"""
type Mutation {
  insertComment(
    post_id: ID!
    text: String!
    created_at: DateTime!
    username: String!
  ): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deleteComment(id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertPost(
    image: String!
    body: String!
    subreadit_id: ID!
    title: String!
    username: String!
  ): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deletePost(id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertSubreadit(created_at: DateTime!, topic: String!): Subreadit
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreadit"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deleteSubreadit(id: ID!): Subreadit
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreadit"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertVote(created_at: DateTime!, post_id: ID!, upvote: Boolean!): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deleteVote(id: ID!): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      dml: DELETE
      configuration: "postgresql_config"
    )
}
