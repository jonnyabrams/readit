type Comment {
  created_at: DateTime
  id: ID!
  post: Post
    @materializer(
      query: "getPost"
      arguments: [{ name: "id", field: "post_id" }]
    )
  post_id: ID
  text: String
  username: String
}

type Post {
  body: String
  created_at: DateTime
  id: ID!
  image: String
  subreadit: [Subreadit]
    @materializer(
      query: "getSubreaditListById"
      arguments: [{ name: "id", field: "subreadit_id" }]
    )
  subreadit_id: ID
  title: String
  username: String
  votes: [Vote]
    @materializer(
      query: "getVotesByPostId"
      arguments: [{ name: "post_id", field: "id" }]
    )
  comments: [Comment]
    @materializer(
      query: "getCommentUsingPost_id"
      arguments: [{ name: "post_id", field: "id" }]
    )
}

type Subreadit {
  created_at: DateTime
  id: ID!
  postList: [Post] @materializer(query: "getPostUsingSubreadit_id")
  topic: String
}

type Vote {
  created_at: DateTime
  id: ID!
  post: Post
    @materializer(
      query: "getPost"
      arguments: [{ name: "id", field: "post_id" }]
    )
  post_id: ID
  upvote: Boolean
}

"""
These are some examples of queries generated from the schema. Feel free to modify them or add your own.
"""
type Query {
  getCommentList: [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )
  getComment(id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )
  getPostList: [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      select * from "post"
      order by "post"."created_at" desc
      """
      configuration: "postgresql_config"
    )
  getPostListByTopic(topic: String!): [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      select *, "post".id as id from "post"
      join "subreadit" on "subreadit"."id" = "post"."subreadit_id"
      where "subreadit"."topic" = $1
      order by "post"."created_at" desc
      """
      configuration: "postgresql_config"
    )
  getPost(id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      configuration: "postgresql_config"
    )
  getCommentUsingPost_id(post_id: ID!): [Comment]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "comment" where "post_id" = $1
      """
      configuration: "postgresql_config"
    )
  getVotesByPostId(post_id: ID!): [Vote]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "vote" where "post_id" = $1
      order by "created_at" desc
      """
      configuration: "postgresql_config"
    )
  getSubreaditList: [Subreadit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreadit"
      configuration: "postgresql_config"
    )
  getSubreaditListByTopic(topic: String!): [Subreadit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      select * from "subreadit" where topic = $1
      """
      configuration: "postgresql_config"
    )
  getSubreadit(id: ID!): Subreadit
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreadit"
      configuration: "postgresql_config"
    )
  getSubreaditListById(id: ID!): [Subreadit]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "subreadit" where "id" = $1
      """
      configuration: "postgresql_config"
    )
  getPostUsingSubreadit_id(id: ID!): [Post]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."body", T."created_at", T."id", T."image", T."subreadit_id", T."title", T."username"
        FROM "public"."post" T
        WHERE T."subreadit_id" = $1
      """
      configuration: "postgresql_config"
    )
  getVoteList: [Vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      configuration: "postgresql_config"
    )
  getVote(id: ID!): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      configuration: "postgresql_config"
    )
}

"""
These are some examples of mutations generated from the schema. Feel free to modify them or add your own.
"""
type Mutation {
  insertComment(post_id: ID!, username: String!, text: String!): Comment
    @dbquery(
      type: "postgresql"
      table: "comment"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deleteComment(id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertPost(
    image: String!
    body: String!
    subreadit_id: ID!
    title: String!
    username: String!
  ): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: INSERT
      configuration: "postgresql_config"
    )
  insertSubreadit(topic: String!): Subreadit
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreadit"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deletePost(id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: DELETE
      configuration: "postgresql_config"
    )
  # insertSubreadit(created_at: DateTime!, topic: String!): Subreadit
  #   @dbquery(
  #     type: "postgresql"
  #     schema: "public"
  #     table: "subreadit"
  #     dml: INSERT
  #     configuration: "postgresql_config"
  #   )
  deleteSubreadit(id: ID!): Subreadit
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreadit"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertVote(created_at: DateTime!, post_id: ID!, upvote: Boolean!): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deleteVote(id: ID!): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      dml: DELETE
      configuration: "postgresql_config"
    )
}
